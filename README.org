#+TITLE: Getting started with .NET OpenLR
Documentation on using OpenLR.

* Introduction to C#/.NET
The Itinero/OpenLR library is written in C#. To build software using it, you'll need a C# SDK, which can be downloaded from Microsoft: [[https://www.microsoft.com/net/learn/get-started][Get started with .NET]]

C# is a language developed by Microsoft, much like Java. It compiles to the virtual platform known as the CLR (Common Language Runtime). Together with a library of standard classes (FCL) this environment is .NET. The .NET environment runs on all major platforms (Windows, MacOS, Linux, Android...) making applications written in a .NET language (C#, F#, Visual Basic) portable.

If you have successfully installed the .NET SDK you should have the =dotnet= command-line tool.

#+BEGIN_SRC shell :exports both
dotnet --version
#+END_SRC

#+RESULTS:
: 2.1.4

** Creating a new project
A new project is created using =dotnet new=

#+BEGIN_SRC shell
dotnet new console --name my-openlr-tool --language C#
#+END_SRC

Then the new project is run using =dotnet run=

#+BEGIN_SRC shell :exports both
cd my-openlr-tool
dotnet run
#+END_SRC

#+RESULTS:
: Hello World!

Our console application was initialized with a  friendly "Hello World!". We will be extending the "Hello World!" example with the first OpenLR example.

#+BEGIN_SRC csharp :tangle my-openlr-tool/Program.cs :noweb no-export
  using System;

  <<first-example-imports>>

  namespace my_openlr_tool
  {
      class Program
      {
	  static void Main(string[] args)
	  {
	      Console.WriteLine("Hello World!");

	      <<first-example-load-data>>
	      <<first-example-encode-line>>
	  }
      }
  }
#+END_SRC

** Adding OpenLR as dependency
The .NET environment has two ways of adding external libraries to a project: packages and references. Adding a package will obtain a pre-compiled library from [[https://www.nuget.org/][NuGet]].

Documentation for OpenLR is a bit scarce: [[docs.itinero.tech]].

#+BEGIN_SRC shell :prologue "cd my-openlr-tool" :results silent
dotnet add package Itinero
dotnet add package Itinero.IO.Osm
dotnet add package OpenLR
#+END_SRC

** Import libraries
#+NAME: first-example-imports
#+BEGIN_SRC csharp
  // import File
  using System.IO;

  // import RouterDb
  using Itinero;
  // import method RouterDb.LoadOsmData
  using Itinero.IO.Osm;
  // import Vehicle
  using Itinero.Osm.Vehicles;

  // import Coder
  using OpenLR;
  // import OsmCoderProfile
  using OpenLR.Osm;
  // import ReferencedLine
  using OpenLR.Referenced.Locations;
#+END_SRC

** Running a first example
The following example encodes and decodes a line in Luxembourg. This loads OSM data from a PBF, which can be found on [[http://download.geofabrik.de/europe/luxembourg.html][GeoFabrik.de]].

*** Load the map
First we need to load the PBF file into the RouterDB. Loading the Luxembourg data takes a few seconds.

#+NAME: first-example-load-data
#+BEGIN_SRC csharp
  Console.Write("Loading Luxembourg ... ");
  var routerDb = new RouterDb();
  using (var sourceStream =
	 File.OpenRead(
	     Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
			  "../../../luxembourg-latest.osm.pbf")))
  {
      routerDb.LoadOsmData(sourceStream, Vehicle.Car);
  }
  Console.WriteLine("done");
#+END_SRC

*** Encode a line
Next we encode a line between two coordinates and then decode it again.

#+NAME: first-example-encode-line
#+BEGIN_SRC csharp
  // create coder.
  var coder = new Coder(routerDb, new OsmCoderProfile());

  Console.WriteLine("Building a line location, and encoding it.");
  // build a line location from a shortest path.
  var line = coder.BuildLine(
      new Itinero.LocalGeo.Coordinate(
	  49.67218282319583f, 6.142280101776122f),
      new Itinero.LocalGeo.Coordinate(
	  49.67776489459803f, 6.1342549324035645f));

  Console.WriteLine("original line: {0} --> {1}",
		    line.StartLocation,
		    line.EndLocation);

  // encode this location.
  var encoded = coder.Encode(line);
  Console.WriteLine("encoded line: {0}", encoded);

  // decode this location.
  var decodedLine = coder.Decode(encoded) as ReferencedLine;
  Console.WriteLine("decoded line: {0} --> {1}",
		    decodedLine.StartLocation,
		    decodedLine.EndLocation);
#+END_SRC

Running this example should give the following output:

#+BEGIN_SRC shell :results verbatim :exports results
cd my-openlr-tool
dotnet run
#+END_SRC

#+RESULTS:
: Hello World!
: Loading Luxembourg ... done
: Building a line location, and encoding it.
: original line: 17060@0% [49.67221,6.14243]  --> 10712@0% [49.67784,6.133887]
: encoded line: CwReMiNSjSOYEvyqAjIjaAIG
: decoded line: 17060@0% [49.67221,6.14243]  --> 10712@0% [49.67784,6.133887]
